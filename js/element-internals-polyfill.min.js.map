{"version":3,"sources":["js\\element-internals-polyfill.js"],"names":["refMap","WeakMap","validityMap","hiddenInputMap","internalsMap","validationMessageMap","formsMap","shadowHostsMap","formElementsMap","refValueMap","upgradeMap","shadowRootMap","validationAnchorMap","documentFragmentMap","setDisabled","ref","disabled","toggleAttribute","setAttribute","removeAttribute","formDisabledCallback","apply","observerConfig$1","attributes","attributeFilter","observer","MutationObserver","mutationsList","mutation","target","constructor","hasAttribute","removeHiddenInputs","internals","get","forEach","hiddenInput","remove","set","createHiddenInput","input","document","createElement","type","name","getAttribute","after","push","initLabels","labels","length","Array","from","label","addEventListener","click","bind","firstLabelId","id","htmlFor","setFormValidity","form","nativeControlValidity","elements","filter","element","validity","map","valid","polyfilledElements","hasInvalid","control","isConnected","includes","formInputCallback","event","findParentForm","formChangeCallback","formResetCallback","size","formAssociated","initForm","formElements","add","initSet","Set","SUBMIT_BUTTON_SELECTOR","submitButtonSelector","closest","noValidate","reverse","node","reportValidity","preventDefault","wireSubmitLogic","formAssociatedCallback","setTimeout","elem","parent","parentNode","tagName","throwIfNotFormAssociated","message","ErrorType","DOMException","overrideFormMethod","returnValue","method","upgradeInternals","aom","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","ValidityState","this","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","Object","seal","isValid","validityState","key","initNode","observerCallback","mutationList","mutationRecord","addedNodes","removedNodes","added","removed","has","keys","delete","localName","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","FILTER_SKIP","FILTER_ACCEPT","current","nextNode","disconnect","fragmentObserverCallback","observerConfig","childList","subtree","customStateMap","CustomStateSet","isPolyfilled","super","indexOf","TypeError","state","test","result","part","clear","entry","entries","ElementInternals","rootNode","getRootNode","states","closureValue","attributeName","defineProperty","value","initAom","isDisabled","observe","initRef","DocumentFragment","fragment","deferUpgrade","checkValidity","willValidate","validityEvent","Event","bubbles","cancelable","composed","dispatchEvent","hostRoot","querySelectorAll","anchor","focus","setFormValue","FormData","formDataKey","formDataValue","setValidity","validityChanges","validationMessage","validityChangesObj","validityObject","check","newState","reconcileValidity","shadowRoot","window","HTMLElement","prototype","attachInternals","ElementInternalsFeatureDetection","randomName","Math","random","toString","replace","customElements","define","featureDetectionElement","every","prop","isElementInternalsSupported","args","call","attachShadowObserver","attachShadow","ShadyDOM","checkValidityOverride","reportValidityOverride","Error","Element","documentElement","HTMLFormElement"],"mappings":"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","sourcesContent":["(function () {\n    'use strict';\n\n    const refMap = new WeakMap();\n    const validityMap = new WeakMap();\n    const hiddenInputMap = new WeakMap();\n    const internalsMap = new WeakMap();\n    const validationMessageMap = new WeakMap();\n    const formsMap = new WeakMap();\n    const shadowHostsMap = new WeakMap();\n    const formElementsMap = new WeakMap();\n    const refValueMap = new WeakMap();\n    const upgradeMap = new WeakMap();\n    const shadowRootMap = new WeakMap();\n    const validationAnchorMap = new WeakMap();\n    const documentFragmentMap = new WeakMap();\n\n    const setDisabled = (ref, disabled) => {\n        ref.toggleAttribute('internals-disabled', disabled);\n        if (disabled) {\n            ref.setAttribute('aria-disabled', 'true');\n        }\n        else {\n            ref.removeAttribute('aria-disabled');\n        }\n        if (ref.formDisabledCallback) {\n            ref.formDisabledCallback.apply(ref, [disabled]);\n        }\n    };\n    const observerConfig$1 = { attributes: true, attributeFilter: ['disabled'] };\n    const observer = new MutationObserver((mutationsList) => {\n        for (const mutation of mutationsList) {\n            const target = mutation.target;\n            if (target.constructor['formAssociated']) {\n                setDisabled(target, target.hasAttribute('disabled'));\n            }\n        }\n    });\n    const removeHiddenInputs = (internals) => {\n        const hiddenInputs = hiddenInputMap.get(internals);\n        hiddenInputs.forEach(hiddenInput => {\n            hiddenInput.remove();\n        });\n        hiddenInputMap.set(internals, []);\n    };\n    const createHiddenInput = (ref, internals) => {\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = ref.getAttribute('name');\n        ref.after(input);\n        hiddenInputMap.get(internals).push(input);\n        return input;\n    };\n    const initRef = (ref, internals) => {\n        hiddenInputMap.set(internals, []);\n        const isDisabled = ref.hasAttribute('disabled');\n        if (isDisabled) {\n            setDisabled(ref, isDisabled);\n        }\n        observer.observe(ref, observerConfig$1);\n    };\n    const initLabels = (ref, labels) => {\n        if (labels.length) {\n            Array.from(labels).forEach(label => label.addEventListener('click', ref.click.bind(ref)));\n            let firstLabelId = labels[0].id;\n            if (!labels[0].id) {\n                firstLabelId = `${labels[0].htmlFor}_Label`;\n                labels[0].id = firstLabelId;\n            }\n            ref.setAttribute('aria-labelledby', firstLabelId);\n        }\n    };\n    const setFormValidity = (form) => {\n        const nativeControlValidity = Array.from(form.elements)\n            .filter((element) => element.validity)\n            .map((element) => element.validity.valid);\n        const polyfilledElements = formElementsMap.get(form) || [];\n        const polyfilledValidity = Array.from(polyfilledElements)\n            .filter(control => control.isConnected)\n            .map((control) => internalsMap.get(control).validity.valid);\n        const hasInvalid = [...nativeControlValidity, ...polyfilledValidity].includes(false);\n        form.toggleAttribute('internals-invalid', hasInvalid);\n        form.toggleAttribute('internals-valid', !hasInvalid);\n    };\n    const formInputCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const formChangeCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const wireSubmitLogic = (form) => {\n        const SUBMIT_BUTTON_SELECTOR = ':is(:is(button, input)[type=submit], button:not([type])):not([disabled])';\n        let submitButtonSelector = `${SUBMIT_BUTTON_SELECTOR}:not([form])`;\n        if (form.id) {\n            submitButtonSelector += `,${SUBMIT_BUTTON_SELECTOR}[form='${form.id}']`;\n        }\n        form.addEventListener('click', event => {\n            const target = event.target;\n            if (target.closest(submitButtonSelector)) {\n                const elements = formElementsMap.get(form);\n                if (form.noValidate) {\n                    return;\n                }\n                if (elements.size) {\n                    const nodes = Array.from(elements);\n                    const validityList = nodes\n                        .reverse()\n                        .map(node => {\n                        const internals = internalsMap.get(node);\n                        return internals.reportValidity();\n                    });\n                    if (validityList.includes(false)) {\n                        event.preventDefault();\n                    }\n                }\n            }\n        });\n    };\n    const formResetCallback = (event) => {\n        const elements = formElementsMap.get(event.target);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                if (element.constructor.formAssociated && element.formResetCallback) {\n                    element.formResetCallback.apply(element);\n                }\n            });\n        }\n    };\n    const initForm = (ref, form, internals) => {\n        if (form) {\n            const formElements = formElementsMap.get(form);\n            if (formElements) {\n                formElements.add(ref);\n            }\n            else {\n                const initSet = new Set();\n                initSet.add(ref);\n                formElementsMap.set(form, initSet);\n                wireSubmitLogic(form);\n                form.addEventListener('reset', formResetCallback);\n                form.addEventListener('input', formInputCallback);\n                form.addEventListener('change', formChangeCallback);\n            }\n            formsMap.set(form, { ref, internals });\n            if (ref.constructor['formAssociated'] && ref.formAssociatedCallback) {\n                setTimeout(() => {\n                    ref.formAssociatedCallback.apply(ref, [form]);\n                }, 0);\n            }\n            setFormValidity(form);\n        }\n    };\n    const findParentForm = (elem) => {\n        let parent = elem.parentNode;\n        if (parent && parent.tagName !== 'FORM') {\n            parent = findParentForm(parent);\n        }\n        return parent;\n    };\n    const throwIfNotFormAssociated = (ref, message, ErrorType = DOMException) => {\n        if (!ref.constructor['formAssociated']) {\n            throw new ErrorType(message);\n        }\n    };\n    const overrideFormMethod = (form, returnValue, method) => {\n        const elements = formElementsMap.get(form);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                const internals = internalsMap.get(element);\n                const valid = internals[method]();\n                if (!valid) {\n                    returnValue = false;\n                }\n            });\n        }\n        return returnValue;\n    };\n    const upgradeInternals = (ref) => {\n        if (ref.constructor['formAssociated']) {\n            const internals = internalsMap.get(ref);\n            const { labels, form } = internals;\n            initLabels(ref, labels);\n            initForm(ref, form, internals);\n        }\n    };\n\n    const aom = {\n        ariaAtomic: 'aria-atomic',\n        ariaAutoComplete: 'aria-autocomplete',\n        ariaBusy: 'aria-busy',\n        ariaChecked: 'aria-checked',\n        ariaColCount: 'aria-colcount',\n        ariaColIndex: 'aria-colindex',\n        ariaColSpan: 'aria-colspan',\n        ariaCurrent: 'aria-current',\n        ariaDisabled: 'aria-disabled',\n        ariaExpanded: 'aria-expanded',\n        ariaHasPopup: 'aria-haspopup',\n        ariaHidden: 'aria-hidden',\n        ariaKeyShortcuts: 'aria-keyshortcuts',\n        ariaLabel: 'aria-label',\n        ariaLevel: 'aria-level',\n        ariaLive: 'aria-live',\n        ariaModal: 'aria-modal',\n        ariaMultiLine: 'aria-multiline',\n        ariaMultiSelectable: 'aria-multiselectable',\n        ariaOrientation: 'aria-orientation',\n        ariaPlaceholder: 'aria-placeholder',\n        ariaPosInSet: 'aria-posinset',\n        ariaPressed: 'aria-pressed',\n        ariaReadOnly: 'aria-readonly',\n        ariaRelevant: 'aria-relevant',\n        ariaRequired: 'aria-required',\n        ariaRoleDescription: 'aria-roledescription',\n        ariaRowCount: 'aria-rowcount',\n        ariaRowIndex: 'aria-rowindex',\n        ariaRowSpan: 'aria-rowspan',\n        ariaSelected: 'aria-selected',\n        ariaSetSize: 'aria-setsize',\n        ariaSort: 'aria-sort',\n        ariaValueMax: 'aria-valuemax',\n        ariaValueMin: 'aria-valuemin',\n        ariaValueNow: 'aria-valuenow',\n        ariaValueText: 'aria-valuetext',\n        role: 'role'\n    };\n    const initAom = (ref, internals) => {\n        for (let key in aom) {\n            internals[key] = null;\n            let closureValue = null;\n            const attributeName = aom[key];\n            Object.defineProperty(internals, key, {\n                get() {\n                    return closureValue;\n                },\n                set(value) {\n                    closureValue = value;\n                    if (ref.isConnected) {\n                        ref.setAttribute(attributeName, value);\n                    }\n                    else {\n                        upgradeMap.set(ref, internals);\n                    }\n                }\n            });\n        }\n    };\n\n    class ValidityState {\n        constructor() {\n            this.badInput = false;\n            this.customError = false;\n            this.patternMismatch = false;\n            this.rangeOverflow = false;\n            this.rangeUnderflow = false;\n            this.stepMismatch = false;\n            this.tooLong = false;\n            this.tooShort = false;\n            this.typeMismatch = false;\n            this.valid = true;\n            this.valueMissing = false;\n            Object.seal(this);\n        }\n    }\n    const setValid = (validityObject) => {\n        validityObject.badInput = false;\n        validityObject.customError = false;\n        validityObject.patternMismatch = false;\n        validityObject.rangeOverflow = false;\n        validityObject.rangeUnderflow = false;\n        validityObject.stepMismatch = false;\n        validityObject.tooLong = false;\n        validityObject.tooShort = false;\n        validityObject.typeMismatch = false;\n        validityObject.valid = true;\n        validityObject.valueMissing = false;\n        return validityObject;\n    };\n    const reconcileValidity = (validityObject, newState, form) => {\n        validityObject.valid = isValid(newState);\n        Object.keys(newState).forEach(key => validityObject[key] = newState[key]);\n        if (form) {\n            setFormValidity(form);\n        }\n        return validityObject;\n    };\n    const isValid = (validityState) => {\n        let valid = true;\n        for (let key in validityState) {\n            if (key !== 'valid' && validityState[key] !== false) {\n                valid = false;\n            }\n        }\n        return valid;\n    };\n\n    function initNode(node) {\n        const internals = internalsMap.get(node);\n        const { form } = internals;\n        initForm(node, form, internals);\n        initLabels(node, internals.labels);\n    }\n    function observerCallback(mutationList) {\n        mutationList.forEach(mutationRecord => {\n            const { addedNodes, removedNodes } = mutationRecord;\n            const added = Array.from(addedNodes);\n            const removed = Array.from(removedNodes);\n            added.forEach(node => {\n                if (internalsMap.has(node) && node.constructor['formAssociated']) {\n                    initNode(node);\n                }\n                if (upgradeMap.has(node)) {\n                    const internals = upgradeMap.get(node);\n                    const aomKeys = Object.keys(aom);\n                    aomKeys\n                        .filter(key => internals[key] !== null)\n                        .forEach(key => {\n                        node.setAttribute(aom[key], internals[key]);\n                    });\n                    upgradeMap.delete(node);\n                }\n                if (node.localName === 'form') {\n                    const formElements = formElementsMap.get(node);\n                    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {\n                        acceptNode(node) {\n                            return internalsMap.has(node) && !(formElements && formElements.has(node)) ?\n                                NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n                        }\n                    });\n                    let current = walker.nextNode();\n                    while (current) {\n                        initNode(current);\n                        current = walker.nextNode();\n                    }\n                }\n            });\n            removed.forEach(node => {\n                const internals = internalsMap.get(node);\n                if (internals && hiddenInputMap.get(internals)) {\n                    removeHiddenInputs(internals);\n                }\n                if (shadowHostsMap.has(node)) {\n                    const observer = shadowHostsMap.get(node);\n                    observer.disconnect();\n                }\n            });\n        });\n    }\n    function fragmentObserverCallback(mutationList) {\n        mutationList.forEach(mutation => {\n            const { removedNodes } = mutation;\n            removedNodes.forEach(node => {\n                const observer = documentFragmentMap.get(mutation.target);\n                if (internalsMap.has(node)) {\n                    upgradeInternals(node);\n                }\n                observer.disconnect();\n            });\n        });\n    }\n    const deferUpgrade = (fragment) => {\n        const observer = new MutationObserver(fragmentObserverCallback);\n        observer.observe(fragment, { childList: true });\n        documentFragmentMap.set(fragment, observer);\n    };\n    new MutationObserver(observerCallback);\n    const observerConfig = {\n        childList: true,\n        subtree: true\n    };\n\n    const customStateMap = new WeakMap();\n    class CustomStateSet extends Set {\n        static get isPolyfilled() {\n            return true;\n        }\n        constructor(ref) {\n            super();\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            customStateMap.set(this, ref);\n        }\n        add(state) {\n            if (!/^--/.test(state) || typeof state !== 'string') {\n                throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state} must start with '--'.`);\n            }\n            const result = super.add(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, true);\n            if (ref.part) {\n                ref.part.add(`state${state}`);\n            }\n            return result;\n        }\n        clear() {\n            for (let [entry] of this.entries()) {\n                this.delete(entry);\n            }\n            super.clear();\n        }\n        delete(state) {\n            const result = super.delete(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, false);\n            if (ref.part) {\n                ref.part.remove(`state${state}`);\n            }\n            return result;\n        }\n    }\n\n    class ElementInternals {\n        constructor(ref) {\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            const rootNode = ref.getRootNode();\n            const validity = new ValidityState();\n            this.states = new CustomStateSet(ref);\n            refMap.set(this, ref);\n            validityMap.set(this, validity);\n            internalsMap.set(ref, this);\n            initAom(ref, this);\n            initRef(ref, this);\n            Object.seal(this);\n            upgradeInternals(ref);\n            if (rootNode instanceof DocumentFragment) {\n                deferUpgrade(rootNode);\n            }\n        }\n        static get isPolyfilled() {\n            return true;\n        }\n        checkValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const validity = validityMap.get(this);\n            if (!validity.valid) {\n                const validityEvent = new Event('invalid', {\n                    bubbles: false,\n                    cancelable: true,\n                    composed: false\n                });\n                ref.dispatchEvent(validityEvent);\n            }\n            return validity.valid;\n        }\n        get form() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            let form;\n            if (ref.constructor['formAssociated'] === true) {\n                form = findParentForm(ref);\n            }\n            return form;\n        }\n        get labels() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const id = ref.getAttribute('id');\n            const hostRoot = ref.getRootNode();\n            if (hostRoot && id) {\n                return hostRoot.querySelectorAll(`[for=\"${id}\"]`);\n            }\n            return [];\n        }\n        reportValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const valid = this.checkValidity();\n            const anchor = validationAnchorMap.get(this);\n            if (anchor && !ref.constructor['formAssociated']) {\n                throw new DOMException(`Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            }\n            if (!valid && anchor) {\n                ref.focus();\n                anchor.focus();\n            }\n            return valid;\n        }\n        setFormValue(value) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            removeHiddenInputs(this);\n            if (value != null && !(value instanceof FormData)) {\n                if (ref.getAttribute('name')) {\n                    const hiddenInput = createHiddenInput(ref, this);\n                    hiddenInput.value = value;\n                }\n            }\n            else if (value != null && value instanceof FormData) {\n                Array.from(value).reverse().forEach(([formDataKey, formDataValue]) => {\n                    if (typeof formDataValue === 'string') {\n                        const hiddenInput = createHiddenInput(ref, this);\n                        hiddenInput.name = formDataKey;\n                        hiddenInput.value = formDataValue;\n                    }\n                });\n            }\n            refValueMap.set(ref, value);\n        }\n        setValidity(validityChanges, validationMessage, anchor) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!validityChanges) {\n                throw new TypeError('Failed to execute \\'setValidity\\' on \\'ElementInternals\\': 1 argument required, but only 0 present.');\n            }\n            validationAnchorMap.set(this, anchor);\n            const validity = validityMap.get(this);\n            const validityChangesObj = {};\n            for (const key in validityChanges) {\n                validityChangesObj[key] = validityChanges[key];\n            }\n            if (Object.keys(validityChangesObj).length === 0) {\n                setValid(validity);\n            }\n            const check = { ...validity, ...validityChangesObj };\n            delete check.valid;\n            const { valid } = reconcileValidity(validity, check, this.form);\n            if (!valid && !validationMessage) {\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);\n            }\n            validationMessageMap.set(this, valid ? '' : validationMessage);\n            ref.toggleAttribute('internals-invalid', !valid);\n            ref.toggleAttribute('internals-valid', valid);\n            ref.setAttribute('aria-invalid', `${!valid}`);\n        }\n        get shadowRoot() {\n            const ref = refMap.get(this);\n            const shadowRoot = shadowRootMap.get(ref);\n            if (shadowRoot) {\n                return shadowRoot;\n            }\n            return null;\n        }\n        get validationMessage() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            return validationMessageMap.get(this);\n        }\n        get validity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const validity = validityMap.get(this);\n            return validity;\n        }\n        get willValidate() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            if ((ref.disabled || ref.hasAttribute('disabled')) ||\n                ref.hasAttribute('readonly')) {\n                return false;\n            }\n            return true;\n        }\n    }\n    function isElementInternalsSupported() {\n        if (!window.ElementInternals || !HTMLElement.prototype.attachInternals) {\n            return false;\n        }\n        class ElementInternalsFeatureDetection extends HTMLElement {\n            constructor() {\n                super();\n                this.internals = this.attachInternals();\n            }\n        }\n        const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`;\n        customElements.define(randomName, ElementInternalsFeatureDetection);\n        const featureDetectionElement = new ElementInternalsFeatureDetection();\n        return [\n            'shadowRoot',\n            'form',\n            'willValidate',\n            'validity',\n            'validationMessage',\n            'labels',\n            'setFormValue',\n            'setValidity',\n            'checkValidity',\n            'reportValidity'\n        ].every(prop => prop in featureDetectionElement.internals);\n    }\n    if (!isElementInternalsSupported()) {\n        window.ElementInternals = ElementInternals;\n        function attachShadowObserver(...args) {\n            const shadowRoot = attachShadow.apply(this, args);\n            const observer = new MutationObserver(observerCallback);\n            shadowRootMap.set(this, shadowRoot);\n            if (window.ShadyDOM) {\n                observer.observe(this, observerConfig);\n            }\n            else {\n                observer.observe(shadowRoot, observerConfig);\n            }\n            shadowHostsMap.set(this, observer);\n            return shadowRoot;\n        }\n        function checkValidityOverride(...args) {\n            let returnValue = checkValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'checkValidity');\n        }\n        function reportValidityOverride(...args) {\n            let returnValue = reportValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'reportValidity');\n        }\n        HTMLElement.prototype.attachInternals = function () {\n            if (!this.tagName) {\n                return {};\n            }\n            else if (this.tagName.indexOf('-') === -1) {\n                throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);\n            }\n            if (internalsMap.has(this)) {\n                throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);\n            }\n            return new ElementInternals(this);\n        };\n        const attachShadow = Element.prototype.attachShadow;\n        Element.prototype.attachShadow = attachShadowObserver;\n        const documentObserver = new MutationObserver(observerCallback);\n        documentObserver.observe(document.documentElement, observerConfig);\n        const checkValidity = HTMLFormElement.prototype.checkValidity;\n        HTMLFormElement.prototype.checkValidity = checkValidityOverride;\n        const reportValidity = HTMLFormElement.prototype.reportValidity;\n        HTMLFormElement.prototype.reportValidity = reportValidityOverride;\n        if (!window.CustomStateSet) {\n            window.CustomStateSet = CustomStateSet;\n        }\n    }\n    else if (!window.CustomStateSet) {\n        window.CustomStateSet = CustomStateSet;\n        const attachInternals = HTMLElement.prototype.attachInternals;\n        HTMLElement.prototype.attachInternals = function (...args) {\n            const internals = attachInternals.call(this, args);\n            internals.states = new CustomStateSet(this);\n            return internals;\n        };\n    }\n\n}());\n"]}